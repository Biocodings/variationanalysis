/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SampleRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2043338385245691672L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SampleRecord\",\"fields\":[{\"name\":\"counts\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.Integer> counts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SampleRecord() {}

  /**
   * All-args constructor.
   */
  public SampleRecord(java.util.List<java.lang.Integer> counts) {
    this.counts = counts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return counts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: counts = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'counts' field.
   */
  public java.util.List<java.lang.Integer> getCounts() {
    return counts;
  }

  /**
   * Sets the value of the 'counts' field.
   * @param value the value to set.
   */
  public void setCounts(java.util.List<java.lang.Integer> value) {
    this.counts = value;
  }

  /**
   * Creates a new SampleRecord RecordBuilder.
   * @return A new SampleRecord RecordBuilder
   */
  public static SampleRecord.Builder newBuilder() {
    return new SampleRecord.Builder();
  }
  
  /**
   * Creates a new SampleRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SampleRecord RecordBuilder
   */
  public static SampleRecord.Builder newBuilder(SampleRecord.Builder other) {
    return new SampleRecord.Builder(other);
  }
  
  /**
   * Creates a new SampleRecord RecordBuilder by copying an existing SampleRecord instance.
   * @param other The existing instance to copy.
   * @return A new SampleRecord RecordBuilder
   */
  public static SampleRecord.Builder newBuilder(SampleRecord other) {
    return new SampleRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for SampleRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SampleRecord>
    implements org.apache.avro.data.RecordBuilder<SampleRecord> {

    private java.util.List<java.lang.Integer> counts;

    /** Creates a new Builder */
    private Builder() {
      super(SampleRecord.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SampleRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.counts)) {
        this.counts = data().deepCopy(fields()[0].schema(), other.counts);
        fieldSetFlags()[0] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing SampleRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(SampleRecord other) {
            super(SampleRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.counts)) {
        this.counts = data().deepCopy(fields()[0].schema(), other.counts);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'counts' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getCounts() {
      return counts;
    }

    /**
      * Sets the value of the 'counts' field.
      * @param value The value of 'counts'.
      * @return This builder.
      */
    public SampleRecord.Builder setCounts(java.util.List<java.lang.Integer> value) {
      validate(fields()[0], value);
      this.counts = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'counts' field has been set.
      * @return True if the 'counts' field has been set, false otherwise.
      */
    public boolean hasCounts() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'counts' field.
      * @return This builder.
      */
    public SampleRecord.Builder clearCounts() {
      counts = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public SampleRecord build() {
      try {
        SampleRecord record = new SampleRecord();
        record.counts = fieldSetFlags()[0] ? this.counts : (java.util.List<java.lang.Integer>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
