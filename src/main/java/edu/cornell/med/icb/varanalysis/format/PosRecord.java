/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.cornell.med.icb.varanalysis.format;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PosRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1941882884381515807L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PosRecord\",\"namespace\":\"edu.cornell.med.icb.varanalysis.format\",\"fields\":[{\"name\":\"refIdx\",\"type\":\"int\"},{\"name\":\"position\",\"type\":\"int\"},{\"name\":\"mutated\",\"type\":\"boolean\"},{\"name\":\"samples\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SampleRecord\",\"fields\":[{\"name\":\"counts\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int refIdx;
  @Deprecated public int position;
  @Deprecated public boolean mutated;
  @Deprecated public java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> samples;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PosRecord() {}

  /**
   * All-args constructor.
   */
  public PosRecord(java.lang.Integer refIdx, java.lang.Integer position, java.lang.Boolean mutated, java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> samples) {
    this.refIdx = refIdx;
    this.position = position;
    this.mutated = mutated;
    this.samples = samples;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return refIdx;
    case 1: return position;
    case 2: return mutated;
    case 3: return samples;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: refIdx = (java.lang.Integer)value$; break;
    case 1: position = (java.lang.Integer)value$; break;
    case 2: mutated = (java.lang.Boolean)value$; break;
    case 3: samples = (java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'refIdx' field.
   */
  public java.lang.Integer getRefIdx() {
    return refIdx;
  }

  /**
   * Sets the value of the 'refIdx' field.
   * @param value the value to set.
   */
  public void setRefIdx(java.lang.Integer value) {
    this.refIdx = value;
  }

  /**
   * Gets the value of the 'position' field.
   */
  public java.lang.Integer getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.Integer value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'mutated' field.
   */
  public java.lang.Boolean getMutated() {
    return mutated;
  }

  /**
   * Sets the value of the 'mutated' field.
   * @param value the value to set.
   */
  public void setMutated(java.lang.Boolean value) {
    this.mutated = value;
  }

  /**
   * Gets the value of the 'samples' field.
   */
  public java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> getSamples() {
    return samples;
  }

  /**
   * Sets the value of the 'samples' field.
   * @param value the value to set.
   */
  public void setSamples(java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> value) {
    this.samples = value;
  }

  /**
   * Creates a new PosRecord RecordBuilder.
   * @return A new PosRecord RecordBuilder
   */
  public static edu.cornell.med.icb.varanalysis.format.PosRecord.Builder newBuilder() {
    return new edu.cornell.med.icb.varanalysis.format.PosRecord.Builder();
  }
  
  /**
   * Creates a new PosRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PosRecord RecordBuilder
   */
  public static edu.cornell.med.icb.varanalysis.format.PosRecord.Builder newBuilder(edu.cornell.med.icb.varanalysis.format.PosRecord.Builder other) {
    return new edu.cornell.med.icb.varanalysis.format.PosRecord.Builder(other);
  }
  
  /**
   * Creates a new PosRecord RecordBuilder by copying an existing PosRecord instance.
   * @param other The existing instance to copy.
   * @return A new PosRecord RecordBuilder
   */
  public static edu.cornell.med.icb.varanalysis.format.PosRecord.Builder newBuilder(edu.cornell.med.icb.varanalysis.format.PosRecord other) {
    return new edu.cornell.med.icb.varanalysis.format.PosRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for PosRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PosRecord>
    implements org.apache.avro.data.RecordBuilder<PosRecord> {

    private int refIdx;
    private int position;
    private boolean mutated;
    private java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> samples;

    /** Creates a new Builder */
    private Builder() {
      super(edu.cornell.med.icb.varanalysis.format.PosRecord.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(edu.cornell.med.icb.varanalysis.format.PosRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.refIdx)) {
        this.refIdx = data().deepCopy(fields()[0].schema(), other.refIdx);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mutated)) {
        this.mutated = data().deepCopy(fields()[2].schema(), other.mutated);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.samples)) {
        this.samples = data().deepCopy(fields()[3].schema(), other.samples);
        fieldSetFlags()[3] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing PosRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(edu.cornell.med.icb.varanalysis.format.PosRecord other) {
            super(edu.cornell.med.icb.varanalysis.format.PosRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.refIdx)) {
        this.refIdx = data().deepCopy(fields()[0].schema(), other.refIdx);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mutated)) {
        this.mutated = data().deepCopy(fields()[2].schema(), other.mutated);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.samples)) {
        this.samples = data().deepCopy(fields()[3].schema(), other.samples);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'refIdx' field.
      * @return The value.
      */
    public java.lang.Integer getRefIdx() {
      return refIdx;
    }

    /**
      * Sets the value of the 'refIdx' field.
      * @param value The value of 'refIdx'.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder setRefIdx(int value) {
      validate(fields()[0], value);
      this.refIdx = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'refIdx' field has been set.
      * @return True if the 'refIdx' field has been set, false otherwise.
      */
    public boolean hasRefIdx() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'refIdx' field.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder clearRefIdx() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public java.lang.Integer getPosition() {
      return position;
    }

    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder setPosition(int value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder clearPosition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mutated' field.
      * @return The value.
      */
    public java.lang.Boolean getMutated() {
      return mutated;
    }

    /**
      * Sets the value of the 'mutated' field.
      * @param value The value of 'mutated'.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder setMutated(boolean value) {
      validate(fields()[2], value);
      this.mutated = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'mutated' field has been set.
      * @return True if the 'mutated' field has been set, false otherwise.
      */
    public boolean hasMutated() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mutated' field.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder clearMutated() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'samples' field.
      * @return The value.
      */
    public java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> getSamples() {
      return samples;
    }

    /**
      * Sets the value of the 'samples' field.
      * @param value The value of 'samples'.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder setSamples(java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord> value) {
      validate(fields()[3], value);
      this.samples = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'samples' field has been set.
      * @return True if the 'samples' field has been set, false otherwise.
      */
    public boolean hasSamples() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'samples' field.
      * @return This builder.
      */
    public edu.cornell.med.icb.varanalysis.format.PosRecord.Builder clearSamples() {
      samples = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PosRecord build() {
      try {
        PosRecord record = new PosRecord();
        record.refIdx = fieldSetFlags()[0] ? this.refIdx : (java.lang.Integer) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Integer) defaultValue(fields()[1]);
        record.mutated = fieldSetFlags()[2] ? this.mutated : (java.lang.Boolean) defaultValue(fields()[2]);
        record.samples = fieldSetFlags()[3] ? this.samples : (java.util.List<edu.cornell.med.icb.varanalysis.format.SampleRecord>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
